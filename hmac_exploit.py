# Requirements: Python 3, Need to get the functions from the cueh_hmac_2.py
# Limitations: secretKey length has to be less than 16 and dont contain numbers(can be improved to adapt to both casess)

from cueh_hmac_2 import cueh_hash_2, numToStr, cueh_hmac_2
import string


def unpacker(packet):
	"""Receive the entire packet as input. Send as output
	the key(hashed) but manipulated(colision)"""
	packet = list(str(packet))
	hashed = ''
	authedMessage = ''
	trigger = False
	for char in packet:
		if char == "|":
			trigger = True
		elif trigger==False:
			hashed += char
		elif trigger==True:
			authedMessage+=char
	hashed = int(hashed,16)
	while len(authedMessage)%16!=0:
		authedMessage = "\0" + authedMessage
	authedMessage = cueh_hash_2(authedMessage,128)
	key=hashed^authedMessage
	key = deash(key)
	return (key)


def deash(key):
	"""Receive the hashed key as input and return 
	the key in plain text""" 
	unFiltered = list(numToStr(key))
	firstBlock = ""
	secondBlock = ""
	toggle = False
	for i in unFiltered:
		if i in string.ascii_letters: 
			if toggle==False:
				if i != i.lower():
					i=i.lower()
				else:
					i=i.upper()
				secondBlock += i
			else:
				firstBlock += i
		else:
			toggle=True
	secretKey=firstBlock+secondBlock
	return secretKey

	



def main():
	"""Menu"""
	while True:
		print ("\n-------HMAC Exploit-------\n")
		print("1. Get secretKey\nq. Exit")
		option = input("Option: ")
		if option == "1":
			packet = input("Message to analyse: ")
			secretKey= unpacker(packet)
			while True:
				print ("\n-------HMAC Exploit-------\n")
				print("1. Send Message w/ secretKey:", secretKey,"\n2. Back\nq. Exit")
				option = input("Option: ")
				if option == "1":
					authedMessage = input("authedMessage: ")
					out=cueh_hmac_2(secretKey,authedMessage, 128)
					dispString="0x%%0%dx|%%s"%(128/16)
					print (dispString%(out, authedMessage))
				if option == "2":
					break
				if option == "q":
					break
		if option == "q":
			break



if __name__=="__main__":
	main()
